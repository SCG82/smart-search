var smartSearch=function(){"use strict";const n=(n,t,e,s)=>{let r=0;const o=[];let i=0;for(let c=e;c<t.length;c++)if(t[c]===n[i]){if(o.push(c),++i===n.length)return{insertions:r,matchIndexes:o}}else if(o.length&&(r++,s.maxInsertions=s.maxInsertions||-1,s.maxInsertions>-1&&r>s.maxInsertions))return null;return null},t=n=>{const t={},e={};n.forEach((n=>{n.patterns.forEach((n=>{(void 0===t[n.value]||n.insertions<t[n.value])&&(t[n.value]=n.insertions,e[n.value]=n.matchIndexes)}))}));let s=0,r=[];for(const n in t)t.hasOwnProperty(n)&&(s+=t[n],r=r.concat(e[n]));return s+r.sort()[0]/1e3},e=(e,s,r,o)=>{const i=[];return e.forEach((e=>{let c=!1;const l=[],a=[];((n,t)=>{const e=[],s=n=>{for(const r in n)n.hasOwnProperty(r)&&(e.push(r),"object"==typeof n[r]?s(n[r]):t([].concat(e)),e.pop())};s(n)})(r,(t=>{const r=((n,t)=>{let e="";for(let s=0;s<t.length;s++){if(void 0===n[t[s]])return null;e=n[t[s]]}return"string"!=typeof e?null:e})(e,t);if(null===r)return;const i=[],h={field:t.join("."),patterns:[]};s.forEach((t=>{const e=((t,e,s)=>{let r=!1,o=0,i=[];s.caseSensitive||(t=t.toLowerCase(),e=e.toLowerCase());for(let c=0;c<e.length;c++)if(e[c]===t[0]){const l=n(t,e,c,s);l&&(!r||l.insertions<=o)&&(!r||l.insertions<o?(r=!0,o=l.insertions,i=l.matchIndexes):i=i.concat(l.matchIndexes))}return r?{value:t,insertions:o,matchIndexes:i}:null})(t,r,o);e&&(h.patterns.push(e),i.push(t),-1===l.indexOf(t)&&l.push(t))})),i.length===s.length?(a.push(h),c=!0):!o.fieldMatching&&h.patterns.length>0&&a.push(h)})),(o.fieldMatching&&c||!o.fieldMatching&&l.length===s.length)&&i.push({entry:e,info:a,score:t(a)})})),i};return(n,t,s,r)=>{const o=(n=>{const t={caseSensitive:!1,fieldMatching:!1,maxInsertions:-1};if(void 0===n)return t;for(const e in t){const s=n[e];void 0!==s&&(t[e]=s)}return t})(r),i=((n,t)=>{if(void 0===n||void 0===n.length||0===n.length)return[];const e={},s=[];return n.forEach((n=>{if("string"!=typeof n)return;const r=t?n:n.toLowerCase();r&&r in e==0&&(e[r]=!0,s.push(n))})),s})([].concat(t),r.caseSensitive),c="string"==typeof s?{[s]:!0}:s;if(0===n.length||0===t.length)return;const l=e(n,i,c,o);return l.sort(((n,t)=>n.score-t.score)),l}}();